// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// your beautiful schema goes below :
model User {
  id           String       @id @unique @default(uuid())
  name         String
  email        String       @unique
  phone        String       @unique
  password     String
  rolesId      Role?        @relation(fields: [role_id], references: [id])
  profile_id   Profile?
  role_id      String?
  users_stores user_store[]
  carts        Cart[]
  cart_items   Cart_Item[]
  invoices     Invoice[]
  payments     Payment[]

  @@map("users")
}

model Role {
  id    String @id @unique @default(uuid())
  name  String
  users User[]

  @@map("roles")
}

model Profile {
  id        String     @id @unique @default(uuid())
  locations String
  usersId   User?      @relation(fields: [user_id], references: [id])
  user_id   String?    @unique
  location  Location[]

  @@map("profiles")
}

model Store {
  id                    String                @id @unique @default(uuid())
  name                  String
  slogan                String?
  description           String
  domain                String
  logo_attachment       String?
  banner_attachment     String?
  decorations           Decoration?
  users_stores          user_store[]
  stores_on_decorations Store_On_Decoration[]
  operation_hours       Operation_Hour[]
  message_templates     Message_Template[]
  locations             Location[]
  products              Product[]
  categories            Category[]
  carts                 Cart[]
  cart_items            Cart_Item[]

  @@map("stores")
}

model user_store {
  id       String  @id @unique @default(uuid())
  usersId  User?   @relation(fields: [user_id], references: [id])
  storesId Store?  @relation(fields: [store_id], references: [id])
  user_id  String?
  store_id String?

  @@map("users_stores")
}

model Decoration {
  id                    String                @id @unique @default(uuid())
  type                  String
  storesId                Store?                @relation(fields: [store_id], references: [id])
  store_id              String?               @unique
  stores_on_decorations Store_On_Decoration[]

  @@map("decorations")
}

model Store_On_Decoration {
  id            String      @id @unique @default(uuid())
  decorationId Decoration? @relation(fields: [decoration_id], references: [id])
  storesId      Store?      @relation(fields: [store_id], references: [id])
  decoration_id  String?
  store_id      String?

  @@map("stores_on_decorations")
}

model Operation_Hour {
  id       String   @id @unique @default(uuid())
  day      String
  open_at  DateTime
  close_at DateTime
  is_off   Boolean?
  storesId Store?   @relation(fields: [store_id], references: [id])
  store_id String?

  @@map("operation_hours")
}

model Message_Template {
  id       String  @id @unique @default(uuid())
  name     String
  content  String
  storesId Store?  @relation(fields: [store_id], references: [id])
  store_id String?

  @@map("message_templates")
}

model Location {
  id               String   @id @unique @default(uuid())
  name             String
  address          String
  postal_code      String
  city_district    String
  latitude         String
  longtitude       String
  storesId         Store?   @relation(fields: [store_id], references: [id])
  profilesId       Profile? @relation(fields: [profile_id], references: [id])
  is_main_location Boolean
  store_id         String?
  profile_id       String?

  @@map("locations")
}

model Product {
  id                     String                @id @unique @default(uuid())
  name                   String
  description            String
  attachments            String
  is_active              Boolean               @default(true)
  variants               String
  size                   String[]
  minumum_order          Int
  storesId               Store?                @relation(fields: [store_id], references: [id])
  store_id               String?
  variant                Variant[]
  products_on_categories Product_On_Category[]
  cart_items             Cart_Item[]

  @@map("products")
}

model Variant {
  id              String           @id @unique @default(uuid())
  name            String
  is_active       Boolean
  productsId      Product?         @relation(fields: [product_id], references: [id])
  product_id      String?
  variant_options Variant_Option[]

  @@map("variants")
}

model Variant_Option {
  id                    String                 @id @unique @default(uuid())
  name                  String
  variantsId            Variant?               @relation(fields: [variant_id], references: [id])
  variant_id            String?
  variant_option_values Variant_Option_Value[]

  @@map("variant_options")
}

model Variant_Option_Value {
  id                 String          @id @unique @default(uuid())
  variant_optionId   Variant_Option? @relation(fields: [variant_options_id], references: [id])
  sku                String
  weight             Float
  stock              Int
  price              Float
  is_active          Boolean         @default(true)
  variant_options_id String?

  @@map("variant_option_values")
}

model Category {
  id                     String                @id @unique @default(uuid())
  name                   String
  storeId               Store?                @relation(fields: [store_id], references: [id])
  store_id               String?
  products_on_categories Product_On_Category[]

  @@map("categories")
}

model Product_On_Category {
  id           String    @id @unique @default(uuid())
  productsId   Product?  @relation(fields: [product_id], references: [id])
  categoriesId Category? @relation(fields: [category_id], references: [id])
  product_id   String?
  category_id  String?

  @@map("products_on_categories")
}

model Cart {
  id         String      @id @unique @default(uuid())
  prices     Float
  discount   Float
  userId     User?       @relation(fields: [users_id], references: [id])
  storeId    Store?      @relation(fields: [store_id], references: [id])
  users_id   String?
  store_id   String?
  cart_items Cart_Item[]
  invoices   Invoice[]

  @@map("carts")
}

model Cart_Item {
  id         String   @id @unique @default(uuid())
  qty        Int
  price      Float
  productId  Product? @relation(fields: [product_id], references: [id])
  cartId     Cart?    @relation(fields: [cart_id], references: [id])
  userId     User?    @relation(fields: [user_id], references: [id])
  storeId    Store?   @relation(fields: [store_id], references: [id])
  product_id String?
  cart_id    String?
  user_id    String?
  store_id   String?

  @@map("cart_items")
}

model Invoice {
  id                  String   @id @unique @default(uuid())
  prices              Float
  discount            Float
  status              String
  receiver_longtitude String
  receiver_latitude   String
  receiver_district   String
  receiver_phone      String
  receiver_address    String
  receiver_name       String
  invoice_number      String
  cartId              Cart?    @relation(fields: [cart_id], references: [id], map: "invoice_cart_fk")
  paymentId           Payment? @relation(fields: [payment_id], references: [id], map: "invoice_payment_fk")
  courierId           Courier? @relation(fields: [courier_id], references: [id], map: "invoice_courier_fk")
  userId              User?    @relation(fields: [user_id], references: [id], map: "invoice_user_fk")
  cart_id             String?  @unique(map: "invoice_cart_id_unique")
  payment_id          String?  @unique(map: "invoice_payment_id_unique")
  courier_id          String?  @unique(map: "invoice_courier_id_unique")
  user_id             String?  @unique(map: "invoice_user_id_unique")

  @@map("invoices")
}

model Payment {
  id         String   @id @unique @default(uuid())
  bank       String
  va_number  String
  amount     Float
  order_id   Int?
  status     String
  invoice_id Invoice?
  user_id    User?    @relation(fields: [usersId], references: [id])
  usersId    String?

  @@map("payments")
}

model Courier {
  id                   String    @id @unique @default(uuid())
  courier_code         String
  courier_service_name String
  courier_service_code String
  price                Float
  invoices             Invoice[]

  @@map("couriers")
}


