// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// your beautiful schema goes below :
model user {
  id           String         @id @unique @default(uuid())
  name         String
  phone        String         @unique
  password     String
  role_id      role?         @relation(fields: [rolesId], references: [id])
  profile_id   profile?
  rolesId      String?
  users_stores user_store[]
  carts        cart[]
  cart_items   cart_item[]
  invoices     invoice[]
  payments     payment[]

  @@map("users")
}

model role {
  id    String  @id @unique @default(uuid())
  name  String
  users user[]

  @@map("roles")
}

model profile {
  id        String      @id @unique @default(uuid())
  locations String
  user_id   user?      @relation(fields: [usersId], references: [id])
  usersId   String? @unique
  location location[]

  @@map("profiles")
}

model store {
  id                    String                  @id @unique @default(uuid())
  name                  String
  slogan                String?
  description           String
  domain                String
  logo_attachment       String?
  banner_attachment     String?
  decorations           decoration?
  users_stores          user_store[]
  stores_on_decorations store_on_decoration[]
  operation_hours       operation_hour[]
  message_templates     message_template[]
  locations             location[]
  products              product[]
  categories            category[]
  carts                 cart[]
  cart_items            cart_item[]

@@map("stores")
}

model user_store {
  id       String  @id @unique @default(uuid())
  user_id  user?  @relation(fields: [usersId], references: [id])
  store_id store? @relation(fields: [storesId], references: [id])
  usersId  String?
  storesId String?

  @@map("users_stores")
}

model decoration {
  id                    String                  @id @unique @default(uuid())
  type                  String
  stores                store?                 @relation(fields: [storesId], references: [id])
  storesId              String? @unique
  stores_on_decorations store_on_decoration[]

  @@map("decorations")
}

model store_on_decoration {
  id            String      @id @unique @default(uuid())
  decoration_id decoration? @relation(fields: [decorationId], references: [id])
  store_id      store?     @relation(fields: [storesId], references: [id])
  decorationId  String?
  storesId      String?

  @@map("stores_on_decorations")
}

model operation_hour {
  id       String   @id @unique @default(uuid())
  day      String
  open_at  DateTime
  close_at DateTime
  is_off   Boolean?
  store_id store?  @relation(fields: [storesId], references: [id])
  storesId String?

  @@map("operation_hours")
}

model message_template {
  id       String  @id @unique @default(uuid())
  name     String
  content  String
  store_id store? @relation(fields: [storesId], references: [id])
  storesId String?

  @@map("message_templates")
}

model location {
  id               String    @id @unique @default(uuid())
  name             String
  address          String
  postal_code      String
  city_district    String
  latitude         String
  longtitude       String
  store_id         store?   @relation(fields: [storesId], references: [id])
  profile_id       profile? @relation(fields: [profilesId], references: [id])
  is_main_location Boolean
  storesId         String?
  profilesId       String?

  @@map("locations")
}

model product {
  id                     String                   @id @unique @default(uuid())
  name                   String
  description            String
  attachments            String
  is_active              Boolean                  @default(true)
  variants               String
  size                   String[]
  minumum_order          Int
  store_id               store?                  @relation(fields: [storesId], references: [id])
  storesId               String?
  variant               variant[]
  products_on_categories product_on_category[]
  cart_items             cart_item[]

  @@map("products")
}

model variant {
  id              String            @id @unique @default(uuid())
  name            String
  is_active       Boolean
  product_id      product?         @relation(fields: [productsId], references: [id])
  productsId      String?
  variant_options variant_option[]

  @@map("variants")
}

model variant_option {
  id                    String                  @id @unique @default(uuid())
  name                  String
  variant_id            variant?               @relation(fields: [variantsId], references: [id])
  variantsId            String?
  variant_option_values variant_option_value[]

  @@map("variant_options")
}

model variant_option_value {
  id                String           @id @unique @default(uuid())
  variant_option_id variant_option? @relation(fields: [variant_optionsId], references: [id])
  sku               String
  weight            Float
  stock             Int
  price             Float
  is_active         Boolean          @default(true)
  variant_optionsId String?

  @@map("variant_option_values")
}

model category {
  id                     String                   @id @unique @default(uuid())
  name                   String
  store_id               store?                  @relation(fields: [storesId], references: [id])
  storesId               String?
  products_on_categories product_on_category[]

  @@map("categories")
}

model product_on_category {
  id           String      @id @unique @default(uuid())
  product_id   product?   @relation(fields: [productsId], references: [id])
  category_id  category? @relation(fields: [categoriesId], references: [id])
  productsId   String?
  categoriesId String?

  @@map("products_on_categories")
}

model cart {
  id         String       @id @unique @default(uuid())
  prices     Float
  discount   Float
  user_id    user?       @relation(fields: [usersId], references: [id])
  store_id   store?      @relation(fields: [storesId], references: [id])
  usersId    String?
  storesId   String?
  cart_items cart_item[]
  invoices   invoice[]

  @@map("carts")
}

model cart_item {
  id         String    @id @unique @default(uuid())
  qty        Int
  price      Float
  product_id product? @relation(fields: [productsId], references: [id])
  cart_id    cart?    @relation(fields: [cartsId], references: [id])
  user_id    user?    @relation(fields: [usersId], references: [id])
  store_id   store?   @relation(fields: [storesId], references: [id])
  productsId String?
  cartsId    String?
  usersId    String?
  storesId   String?

  @@map("cart_items")
}

model invoice {
  id                  String    @id @unique @default(uuid())
  prices              Float
  discount            Float
  status              String
  receiver_longtitude String
  receiver_latitude   String
  receiver_district   String
  receiver_phone      String
  receiver_address    String
  receiver_name       String
  invoice_number      String
  cart_id             cart?    @relation(fields: [cartsId], references: [id])
  payment_id          payment? @relation(fields: [paymentsId], references: [id])
  courier_id          courier?
  user_id             user?    @relation(fields: [usersId], references: [id])
  cartsId             String?
  paymentsId          String? @unique
  usersId             String?

  @@map("invoices")
}

model payment {
  id         String    @id @unique @default(uuid())
  bank       String
  va_number  String
  amount     Float
  order_id   Int?
  status     String
  invoice_id invoice?
  user_id    user?    @relation(fields: [usersId], references: [id])
  usersId    String?

  @@map("payments")
}

model courier {
  id                   String    @id @unique @default(uuid())
  courier_code         String
  courier_service_name String
  courier_service_code String
  price                Float
  invoice_id           invoice? @relation(fields: [invoicesId], references: [id])
  invoicesId           String? @unique

  @@map("couriers")
}

