// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// your beautiful schema goes below :
model User {
  id          String      @id @unique @default(uuid())
  name        String
  email       String      @unique
  phone       String      @unique
  password    String
  roles       Role[]
  profile     Profile?
  usersStores UserStore[]
  carts       Cart[]
  cartItems   CartItem[]
  invoices    Invoice?
  payments    Payment[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @default(now())

  @@map("users")
}

model Role {
  id        String   @id @unique @default(uuid())
  name      String
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@map("roles")
}

model Profile {
  id        String     @id @unique @default(uuid())
  user      User       @relation(fields: [userId], references: [id])
  userId    String     @unique
  locations Location[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now())

  @@map("profiles")
}

model Store {
  id                String            @id @unique @default(uuid())
  name              String
  slogan            String?
  description       String
  domain            String
  logoAttachment     String?
  bannerAttachment  String?
  usersStores       UserStore[]
  storesDecorations StoreDecoration[]
  operationHours    OperationHour[]
  messageTemplates  MessageTemplate[]
  locations         Location[]
  products          Product[]
  categories        Category[]
  carts             Cart[]
  cartItems         CartItem[]
  bankAccount       BankAccount[]
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @default(now())

  @@map("stores")
}

model UserStore {
  id        String   @id @unique @default(uuid())
  user      User?    @relation(fields: [userId], references: [id])
  store     Store?   @relation(fields: [storeId], references: [id])
  userId    String?
  storeId   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@map("users_stores")
}

model Decoration {
  id                String            @id @unique @default(uuid())
  type              String
  storesDecorations StoreDecoration[]
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @default(now())

  @@map("decorations")
}

model StoreDecoration {
  id           String      @id @unique @default(uuid())
  decoration   Decoration? @relation(fields: [decorationId], references: [id])
  store        Store?      @relation(fields: [storeId], references: [id])
  decorationId String?
  storeId      String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @default(now())

  @@map("stores_decorations")
}

model OperationHour {
  id        String   @id @unique @default(uuid())
  day       String
  openAt    DateTime
  closeAt   DateTime
  isOff     Boolean?
  store     Store?   @relation(fields: [storeId], references: [id])
  storeId   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@map("operation_hours")
}

model MessageTemplate {
  id        String   @id @unique @default(uuid())
  name      String
  content   String
  store     Store?   @relation(fields: [storeId], references: [id])
  storeId   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@map("message_templates")
}

model Location {
  id             String   @id @unique @default(uuid())
  name           String
  address        String
  postalCode     String
  cityDistrict   String
  latitude       String
  longtitude     String
  store          Store?   @relation(fields: [storeId], references: [id])
  profile        Profile? @relation(fields: [profileId], references: [id])
  isMainLocation Boolean
  storeId        String?
  profileId      String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now())

  @@map("locations")
}

model Product {
  id                 String            @id @unique @default(uuid())
  name               String
  description        String
  attachments        String[]
  isActive           Boolean           @default(true)
  minumumOrder       Int
  store              Store?            @relation(fields: [storeId], references: [id])
  storeId            String?
  slug               String
  variants           Variant[]
  productsCategories ProductCategory[]
  cartItems          CartItem[]
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @default(now())

  @@map("products")
}

model Variant {
  id             String          @id @unique @default(uuid())
  name           String
  isActive       Boolean
  product        Product?        @relation(fields: [productId], references: [id])
  productId      String?
  variantOptions VariantOption[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @default(now())

  @@map("variants")
}

model VariantOption {
  id                  String               @id @unique @default(uuid())
  name                String
  variant             Variant?             @relation(fields: [variantId], references: [id])
  variantId           String?
  variantOptionValues VariantOptionValue[]
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @default(now())

  @@map("variant_options")
}

model VariantOptionValue {
  id              String                 @id @unique @default(uuid())
  variantOption   VariantOption?         @relation(fields: [variantOptionId], references: [id])
  sku             String
  weight          Float
  size            VariantOptionValueSize @relation(fields: [sizeId], references: [id])
  sizeId          String                 @unique
  stock           Int
  price           Float
  isActive        Boolean                @default(true)
  variantOptionId String?
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @default(now())

  @@map("variant_option_values")
}

model VariantOptionValueSize {
  id                   String              @id @unique @default(uuid())
  length               Float
  width                Float
  height               Float
  variantOptionValue   VariantOptionValue?
  variantOptionValueId String?
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @default(now())

  @@map("product_sizes")
}

model Category {
  id                 String            @id @unique @default(uuid())
  name               String
  store              Store?            @relation(fields: [storeId], references: [id])
  storeId            String?
  productsCategories ProductCategory[]
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @default(now())

  @@map("categories")
}

model ProductCategory {
  id         String    @id @unique @default(uuid())
  product    Product?  @relation(fields: [productId], references: [id])
  category   Category? @relation(fields: [categoryId], references: [id])
  productId  String?
  categoryId String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now())

  @@map("products_categories")
}

model Cart {
  id        String     @id @unique @default(uuid())
  price     Float
  discount  Float
  user      User?      @relation(fields: [userId], references: [id])
  store     Store?     @relation(fields: [storeId], references: [id])
  userId    String?
  storeId   String?
  cartItems CartItem[]
  invoice   Invoice?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now())

  @@map("carts")
}

model CartItem {
  id        String   @id @unique @default(uuid())
  qty       Int
  price     Float
  product   Product? @relation(fields: [productId], references: [id])
  cart      Cart?    @relation(fields: [cartId], references: [id])
  user      User?    @relation(fields: [userId], references: [id])
  store     Store?   @relation(fields: [storeId], references: [id])
  productId String?
  cartId    String?
  userId    String?
  storeId   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@map("cart_items")
}

model Invoice {
  id                 String           @id @unique @default(uuid())
  price              Float
  discount           Float
  status             String
  receiverLongitude  String
  receiverLatitude   String
  receiverDistrict   String
  receiverPhone      String
  receiverAddress    String
  receiverName       String
  invoiceNumber      String
  waybill            String
  cart               Cart?            @relation(fields: [cartId], references: [id])
  payment            Payment?
  courier            Courier?
  user               User?            @relation(fields: [userId], references: [id])
  cartId             String?          @unique
  paymentId          String?          @unique
  courierId          String?          @unique
  userId             String?          @unique
  invoiceHistories   InvoiceHistory[]
  mootaTransactionId String
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @default(now())

  @@map("invoices")
}

model Payment {
  id        String   @id @unique @default(uuid())
  bank      String
  amount    Float
  status    String
  invoice   Invoice? @relation(fields: [invoiceId], references: [id])
  invoiceId String?  @unique
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@map("payments")
}

model Courier {
  id                 String   @id @unique @default(uuid())
  courierCode        String
  courierServiceName String
  courierServiceCode String
  price              Float
  invoice            Invoice? @relation(fields: [invoiceId], references: [id])
  invoiceId          String?  @unique
  createdAt          DateTime @default(now())
  updatedAt          DateTime @default(now())

  @@map("couriers")
}

model InvoiceHistory {
  id        String   @id @unique @default(uuid())
  status    String
  invoice   Invoice? @relation(fields: [invoiceId], references: [id])
  invoiceId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@map("invoice_histories")
}

model BankAccount {
  id            String  @id @unique @default(uuid())
  bank          String
  accountNumber Int
  store         Store?  @relation(fields: [storeId], references: [id])
  storeId       String?

  @@map("bank_accounts")
}
